#!/usr/bin/env python3

"""Output an SSH MOTD with ASCII art and some general information."""


import os
import socket
from datetime import datetime
from random import choice, randint
from subprocess import DEVNULL, Popen, check_output
from sys import stderr
from tempfile import NamedTemporaryFile


def unify_len(lines):
    """Pad each line with trailing spaces, making them the same length."""
    longest = max([len(l) for l in lines])
    return [l + ' '*(longest-len(l)) for l in lines]


def get_ascii_art():
    """Return a randomly chosen ASCII art string."""
    fleur_de_lis = '''
             8
           .d8b.
       _.d8888888b._
     .88888888888888b.
    d88888888888888888b
    8888888888888888888
    Y88888888888888888P
     'Y8888888888888P'
   _..._ 'Y88888P' _..._
 .d88889b. Y888P .d88888b.
d888888888b 888 d88888888b
888P  `Y8888888888P'  Y888
 b8b    Y88888888P    d8Y
  `"'  #############  '"`
         dP d8b Yb
     Ob=dP d888b Yb=dO
      `"` O88888O `"`
   jgs     'Y8P'
             '
     by: Joan G. Stark'''

    animal_skull = """
          .                                                      .
        .n                   .                 .                  n.
  .   .dP                  dP                   9b                 9b.    .
 4    qXb         .       dX                     Xb       .        dXp     t
dX.    9Xb      .dXb    __                         __    dXb.     dXP     .Xb
9XXb._       _.dXXXXb dXXXXbo.                 .odXXXXb dXXXXb._       _.dXXP
 9XXXXXXXXXXXXXXXXXXXVXXXXXXXXOo.           .oOXXXXXXXXVXXXXXXXXXXXXXXXXXXXP
  `9XXXXXXXXXXXXXXXXXXXXX'~   ~`OOO8b   d8OOO'~   ~`XXXXXXXXXXXXXXXXXXXXXP'
    `9XXXXXXXXXXXP' `9XX'          `98v8P'          `XXP' `9XXXXXXXXXXXP'
        ~~~~~~~       9X.          .db|db.          .XP       ~~~~~~~
                        )b.  .dbo.dP'`v'`9b.odb.  .dX(
                      ,dXXXXXXXXXXXb     dXXXXXXXXXXXb.
                     dXXXXXXXXXXXP'   .   `9XXXXXXXXXXXb
                    dXXXXXXXXXXXXb   d|b   dXXXXXXXXXXXXb
                    9XXb'   `XXXXXb.dX|Xb.dXXXXX'   `dXXP
                     `'      9XXXXXX(   )XXXXXXP      `'
                              XXXX X.`v'.X XXXX
                              XP^X'`b   d'`X^XX
                              X. 9  `   '  P )X
                              `b  `       '  d'
                               `             '"""

    # A dict of this function's local variables and their values
    art_choices = locals()
    # Get one of art_choices' keys at random
    key = choice(list(art_choices.keys()))
    # Remove the leading newline
    return art_choices[key][1:]


def get_int_ip():
    """Print this computer's internal ip address."""
    # Open a socket
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # Connect to Google's DNS
    s.connect(('8.8.8.8', 53))
    # Get the internal ip address from socket info
    int_ip = s.getsockname()[0]
    s.close()
    return int_ip


def get_info_box():
    r"""Return a block of information with an ASCII box drawn around it.

    Example:
        >>> box = get_info_box()
        >>> print(box)
         ______________________
        /\                     \
        \_|  Distro.....: ...  |
          |  Hostname...: ...  |
          |  Internal IP: ...  |
          |  External IP: ...  |
          |  Time.......: ...  |
          |  Date.......: ...  |
          |  Weather....: ...  |
          |                    |
          |   _________________|_
           \_/___________________/
    """
    warn = ''

    # Try to get distro info from /etc/os-release
    if os.path.exists('/etc/os-release'):
        with open('/etc/os-release', 'r') as f:
            info = f.read().strip()
        info = [e.split('=') for e in info.replace('"', '').split('\n')]
        info = {var: val for var, val in info}
        distro = info['PRETTY_NAME']
    # Try to get distro info from /etc/lsb-release
    elif os.path.exists('/etc/lsb-release'):
        with open('/etc/lsb-release', 'r') as f:
            info = f.read().strip()
        info = [e.split('=') for e in info.replace('"', '').split('\n')]
        info = {var: val for var, val in info}
        distro = info['DISTRIB_DESCRIPTION']
    # Could not get distro info
    else:
        distro = ''
        warn += 'Warning: could not get distro information\n'

    hostname = socket.gethostname()
    int_ip = get_int_ip()
    try:
        with open('/etc/update-motd.d/pretty-header-ext-ip.txt', 'r') as f:
            ext_ip = f.read().strip()
    except FileNotFoundError:
        ext_ip = ''
        warn += 'Warning: /etc/update-motd.d/pretty-header-ext-ip.txt ' + \
                'does not exist\n'
    time = datetime.now().time().strftime('%I:%M:%S %p')
    date = datetime.now().date().strftime('%a, %b %d, %Y')
    try:
        with open('/etc/update-motd.d/pretty-header-weather.txt', 'r') as f:
            weather = f.read().strip()
    except FileNotFoundError:
        weather = ''
        warn += 'Warning: /etc/update-motd.d/pretty-header-weather.txt ' + \
                'does not exist\n'

    box_info = ['Distro.....: %s' % distro,
                'Hostname...: %s' % hostname,
                'Internal IP: %s' % int_ip,
                'External IP: %s' % ext_ip,
                'Time.......: %s' % time,
                'Date.......: %s' % date,
                'Weather....: %s' % weather]
    box_info = ''.join([e + '\n' for e in box_info])

    # Draw a box around info
    p = Popen(['which', 'boxes'], stdout=DEVNULL)
    p.communicate()
    if not p.returncode:
        cmd = 'echo "%s" | HOME=/ boxes -d parchment -p h2' % box_info
        return check_output(cmd, shell=True).decode(), warn
    else:
        warn += 'Warning: could not find\n'
        return box_info, warn


def zip_center(first, second):
    """Zip two lists, padding the front and back of the shorter list.

    Empty strings are added to both sides of the shorter of the two lists
    passed as arguments. If the number of empty strings to be padded is odd,
    the extra one is prepended to the shorter list.

    Example:
        >>> first =  ['a', 'b', 'c', 'd', 'e', 'f']
        >>> second = [          'x', 'y', 'z'     ]
        >>> center_zip(first, second)
        [('a', ''), ('b', ''), ('c', 'x'), ('d', 'y'), ('e', 'z'), ('f', '')]
    """
    if len(first) > len(second):
        longest = first
        shortest = second
    elif len(second) > len(first):
        longest = second
        shortest = first
    else:
        return zip(first, second)

    quot, rem = divmod(len(longest)-len(shortest), 2)
    shortest[:0] = [''] * (quot+1 if rem else quot)
    shortest.extend([''] * quot)

    return zip(first, second)


def main():
    """Combine ASCII art and some information, then colorize and output it.

    Example:
        >>> main()
        +-----------+
        | This is   |
        | the ascii |   +--------------+
        | art that  |   | This is the  |
        | takes up  |   | information. |
        | a lot of  |   +--------------+
        | space.    |
        +-----------+
    """
    ascii_art = unify_len(get_ascii_art().split('\n'))
    box, warn = get_info_box()

    # Combine ascii_art and box_str
    output = ([a + '     ' + b for a, b in
               zip_center(ascii_art, box.split('\n'))])
    output = '\n'.join(output)

    # Pick a random seed for lolcat from seeds
    seeds = [39, 49, 60]
    s = seeds[randint(0, len(seeds)-1)]

    # Try to colorize output
    p = Popen(['/usr/games/lolcat', '-v'], stdout=DEVNULL)
    p.communicate()
    if not p.returncode:
        with NamedTemporaryFile() as tf:
            # Write the output to a temp file
            tf.write(output.encode('utf-8'))
            tf.flush()
            # Open the temp file for reading and direct it into lolcat
            cmd = '/usr/games/lolcat -fS %s < %s' % (s, tf.name)
            print(check_output(cmd, shell=True).decode(), end='')
    else:
        print(output)
        warn += 'Warning: could not find lolcat\n'

    print(warn, end='', file=stderr)


if __name__ == '__main__':
    main()
